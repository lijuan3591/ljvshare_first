{"name": "测试数据：【 1532341，111111a，{except_result}，10000，token】", "status": "broken", "statusDetails": {"message": "TypeError: can only join an iterable", "trace": "self = <testcases.api_test.test_03_login.TestUserLogin object at 0x000002730AA16978>\nusername = '1532341', password = '111111a', login_type = 1, except_code = 10000\nexcept_msg = 'token'\nheaders = {'Content-Type': 'application/json', 'select_nation_id': 'RU'}\nurl = '/idserverhq/public/auth/login'\nextract = {'token': '$..token', 'user_id': '$..user_id'}\n\n    @allure.story(\"用例--登录用户\")\n    @allure.description(\"该用例是针对获取用户登录接口的测试\")\n    @allure.issue(\"https://www.cnblogs.com/wintest\", name=\"点击，跳转到对应BUG的链接地址\")\n    @allure.testcase(\"https://www.cnblogs.com/wintest\", name=\"点击，跳转到对应用例的链接地址\")\n    @allure.title(\"测试数据：【 {username}，{password}，{except_result}，{except_code}，{except_msg}】\")\n    @pytest.mark.single\n    @pytest.mark.parametrize(\"username, password, login_type, except_code, except_msg, headers, url,extract\",\n                             api_data[\"test_login_user\"])\n    \n    def test_login_user(self, username, password, login_type, except_code, except_msg,headers,url,extract):\n        logger.info(\"*************** 开始执行用例 ***************\")\n        result = login_user(username, password, login_type,headers,url)\n        step_1(username)\n        # assert except_msg in result.response.text\n        result = result.response.json()\n        # assert result.response.status_code == 200\n        logger.info(\"result==>>结果是：{}\".format(result))\n        logger.info(\"except_msg==>>结果是：{}\".format(except_msg))\n        logger.info(\"code ==>> 期望结果：{}， 实际结果：【 {} 】\".format(except_code, result.get(\"code\")))\n    \n>       assert_validate(except_msg,result,extract)\n\ntest_03_login.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nexcept_msg = 'token'\nresult = '{\"code\": 10000, \"msg\": \"\", \"data\": {\"token\": \"iWFOSrvk1bX5f2PvZV6lgRn1mok=\", \"modify_password_type\": 2, \"is_new\": fal...\": 1, \"attribute\": \"0\", \"cur_period\": \"202211\", \"cur_week\": \"20221101\", \"register_status\": true}, \"app_config\": null}}'\nextract = {'token': '$..token', 'user_id': '$..user_id'}\n\n    def assert_validate(except_msg,result,extract):\n        \"\"\"\n            断言封装\n            :validate: 断言\n            :result: 返回结果\n            :extract: 取值\n           \"\"\"\n    \n            # for key, value in headers.items():\n            #     if str(value).startswith('${') and str(value).endswith('}'):\n            #         headers[str(key)] = ReadFileData().read_extract_yaml(str(key))\n            #     else:\n            #         headers[str(key)] = str(value)\n        # for val in validate:\n            # assert val['eq']['code'] == result.response.json()['code']\n        # assert validate in result.response.text\n    \n        # if ''.join(validate['eq']['code']) == result.response.json()['code']:\n        # if result.response.json()['code'] == 10000:\n        result = json.dumps(result)\n        logger.info(\"assert--result==>>结果是：{}\".format(result))\n        assert str(except_msg) in result\n        # extract = json.loads(extract)\n        if extract and isinstance(extract, dict):\n            for key,value in extract.items():\n                # ReadFileData().write_extract_yaml({str(key): result.get(str(key))})\n>               ReadFileData().write_extract_yaml({str(key): ''.join(jsonpath(result,value))})\nE               TypeError: can only join an iterable\n\n..\\..\\operation\\user.py:167: TypeError"}, "description": "该用例是针对获取用户登录接口的测试", "steps": [{"name": "步骤1 ==>> 登录用户", "status": "passed", "parameters": [{"name": "username", "value": "'1532341'"}], "start": 1669457968348, "stop": 1669457968349}], "attachments": [{"name": "log", "source": "0ab8cc31-3c74-451b-8da4-1aef5a4d379a-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "username", "value": "'1532341'"}, {"name": "password", "value": "'111111a'"}, {"name": "login_type", "value": "1"}, {"name": "except_code", "value": "10000"}, {"name": "except_msg", "value": "'token'"}, {"name": "headers", "value": "{'Content-Type': 'application/json', 'select_nation_id': 'RU'}"}, {"name": "url", "value": "'/idserverhq/public/auth/login'"}, {"name": "extract", "value": "{'token': '$..token', 'user_id': '$..user_id'}"}], "start": 1669457966443, "stop": 1669457968364, "uuid": "7ffc77a4-61fd-4801-a5ee-012ab06a80c7", "historyId": "f67ed0e4141612fe299c8ae689da3813", "testCaseId": "7272db244dabef390096479ae3196642", "fullName": "testcases.api_test.test_03_login.TestUserLogin#test_login_user", "labels": [{"name": "feature", "value": "用户登录模块"}, {"name": "epic", "value": "针对单个接口的测试"}, {"name": "story", "value": "用例--登录用户"}, {"name": "severity", "value": "normal"}, {"name": "tag", "value": "single"}, {"name": "parentSuite", "value": "testcases.api_test"}, {"name": "suite", "value": "test_03_login"}, {"name": "subSuite", "value": "TestUserLogin"}, {"name": "host", "value": "lijuan"}, {"name": "thread", "value": "20796-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.api_test.test_03_login"}], "links": [{"type": "test_case", "url": "https://www.cnblogs.com/wintest", "name": "点击，跳转到对应用例的链接地址"}, {"type": "issue", "url": "https://www.cnblogs.com/wintest", "name": "点击，跳转到对应BUG的链接地址"}]}
{"name": "测试数据：【 {username}，{password}，{except_result}，10000，shipping_channel】", "status": "broken", "statusDetails": {"message": "TypeError: sequence item 0: expected str instance, int found", "trace": "self = <testcases.api_test.test_03_login.TestUserLogin object at 0x00000206161E12E8>\nexcept_code = 10000, except_msg = 'shipping_channel'\nheaders = {'Content-Type': 'application/json', 'select_nation_id': 'RU', 'shop_id': 'RU998001', 'shoppingcartid': '-1', ...}\nurl = '/order-aggr/api/checkout/v2/${checkout_id}'\nextract = {'shipping_address_id': '$..shipping_address_id', 'shipping_id': '$..shipping_channel[0][id]'}\n\n    @allure.story(\"用例--进入到结算页\")\n    @allure.description(\"该用例是用户登录成功后，进入到结算页\")\n    @allure.issue(\"https://www.cnblogs.com/wintest\", name=\"点击，跳转到对应BUG的链接地址\")\n    @allure.testcase(\"https://www.cnblogs.com/wintest\", name=\"点击，跳转到对应用例的链接地址\")\n    @allure.title(\"测试数据：【 {username}，{password}，{except_result}，{except_code}，{except_msg}】\")\n    @pytest.mark.single\n    @pytest.mark.parametrize(\"except_code, except_msg, headers, url, extract\",api_data[\"test_checkout\"])\n    def test_checkout(self, except_code, except_msg, headers, url, extract):\n        logger.info(\"*************** 开始执行用例 ***************\")\n        result = checkout(headers, url)\n        step_1(url)\n        result = result.response.json()\n        # logger.info(\"这是提取的extract的值：{}\".format(''.join(jsonpath(result, \"$..shipping_address_id\"))))\n    \n        logger.info(\"code ==>> 期望结果：{}， 实际结果：【 {} 】\".format(except_code, result.get(\"code\")))\n>       assert_validate(except_msg, result, extract)\n\ntest_03_login.py:98: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nexcept_msg = 'shipping_channel'\nresult = {'code': 10000, 'data': {'checkout': {'achieve_mobile': None, 'achieve_mobile_areacode': None, 'address_billing': None...[], 'exclude_order_total': '16 949,15₽', ...}, 'promotion_gift': {'giftVos': [], 'total_gift_num': 0}, ...}, 'msg': ''}\nextract = {'shipping_address_id': '$..shipping_address_id', 'shipping_id': '$..shipping_channel[0][id]'}\n\n    def assert_validate(except_msg,result,extract):\n        \"\"\"\n            断言封装\n            :validate: 断言\n            :result: 返回结果\n            :extract: 取值\n           \"\"\"\n    \n        result = json.dumps(result)\n        # logger.info(\"assert--result==>>结果是：{}\".format(result))\n        assert str(except_msg) in result\n        logger.info(\"assert==>>结果是：断言成功\")\n        result = json.loads(result)\n        if extract and isinstance(extract, dict):\n            for key,value in extract.items():\n>               ReadFileData().write_extract_yaml({str(key): ''.join(jsonpath(result,value))})\nE               TypeError: sequence item 0: expected str instance, int found\n\n..\\..\\operation\\user.py:170: TypeError"}, "description": "该用例是用户登录成功后，进入到结算页", "steps": [{"name": "步骤1 ==>> 登录用户", "status": "passed", "parameters": [{"name": "username", "value": "'/order-aggr/api/checkout/v2/${checkout_id}'"}], "start": 1669713076128, "stop": 1669713076128}], "attachments": [{"name": "log", "source": "80407c36-f1f8-452a-acc3-8783747c4a89-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "except_code", "value": "10000"}, {"name": "except_msg", "value": "'shipping_channel'"}, {"name": "headers", "value": "{'tiens_token': '${tiens_token}', 'user_id': '${user_id}', 'shop_id': 'RU998001', 'shoppingcartid': '-1', 'Content-Type': 'application/json', 'select_nation_id': 'RU'}"}, {"name": "url", "value": "'/order-aggr/api/checkout/v2/${checkout_id}'"}, {"name": "extract", "value": "{'shipping_id': '$..shipping_channel[0][id]', 'shipping_address_id': '$..shipping_address_id'}"}], "start": 1669713072860, "stop": 1669713076131, "uuid": "744320a2-805c-4db7-a6c0-3677613f0df2", "historyId": "1227c20c7da6ce421fb8bcf7292dad31", "testCaseId": "f0117731a5eac6e6ed2367e8cee26013", "fullName": "testcases.api_test.test_03_login.TestUserLogin#test_checkout", "labels": [{"name": "story", "value": "用例--进入到结算页"}, {"name": "severity", "value": "normal"}, {"name": "feature", "value": "用户登录模块"}, {"name": "epic", "value": "针对单个接口的测试"}, {"name": "tag", "value": "single"}, {"name": "parentSuite", "value": "testcases.api_test"}, {"name": "suite", "value": "test_03_login"}, {"name": "subSuite", "value": "TestUserLogin"}, {"name": "host", "value": "lijuan"}, {"name": "thread", "value": "18032-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.api_test.test_03_login"}], "links": [{"type": "test_case", "url": "https://www.cnblogs.com/wintest", "name": "点击，跳转到对应用例的链接地址"}, {"type": "issue", "url": "https://www.cnblogs.com/wintest", "name": "点击，跳转到对应BUG的链接地址"}]}